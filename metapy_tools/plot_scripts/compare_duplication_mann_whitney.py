#!/usr/bin/env python
# title: Mann whitney: do duplication value alter between methodologies. :
# using output from duplication_number_to_filename
# (c) The James Hutton Institute 2018
# Author: Peter Thorpe, Leighton Pritchard
import sys
import os
import argparse
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC
from Bio import SeqIO
import matplotlib
# this code added to prevent this error:
# self.tk = _tkinter.create(screenName, baseName,
# className, interactive, wantobjects, useTk, sync, use)
# _tkinter.TclError: no display name and
# no $DISPLAY environment variable
# Force matplotlib to not use any Xwindows backend.
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pandas as pd
from collections import defaultdict
#import seaborn as sns
plt.style.use('seaborn')
import pylab
from math import log
from scipy import stats
from scipy.stats import mannwhitneyu



VERSION = "summerise results: v0.01"
if "--version" in sys.argv:
    print(VERSION)
    sys.exit(1)

usage = """

python compare_duplication_mann_whitney.py -h

python compare_duplication_mann_whitney.py
        -1 infile_DEREP_NUMBERS.txt
        -2 different__DEREP_NUMBERS.txt
        -o outfile.results.txt

The infiles need to be files generated by  python duplication_number_to_filename.py

require: Biopython, matplotlib, pandas

"""
if "--help" or "-h" in sys.argv:
    #print(usage)
    pass


def get_args():
    parser = argparse.ArgumentParser(description="dereplication numbers ",
                                     add_help=False)
    file_directory = os.path.realpath(__file__).split("duplication_number_to_filename")[0]
    optional = parser.add_argument_group('optional arguments')

    optional.add_argument("-o", "--out", dest='out',
                          action="store",
                          default="results.txt",
                          type=str,
                          help="outfile name")
    optional.add_argument("-1", "--in1", dest='in1',
                          action="store",
                          default=None,
                          type=str,
                          help="infile1")

    optional.add_argument("-2", "--in2", dest='in2',
                          action="store",
                          default=None,
                          type=str,
                          help="infile2")
    optional.add_argument("-h", "--help",
                          action="help",
                          default=argparse.SUPPRESS,
                          help="Displays this help message"
                          " type --version for version")

    optional.add_argument('--version',
                          action='version',
                          version="%s: metapy.py " + VERSION)
    args = parser.parse_args()
    return args, file_directory


def stats_on_list_of_sizes(in_list1, in_list2):
    """function to perform stats on two lists of seq lens.
    Returns as a tab separeated string:
    as_skew,
    in_list1_skew,
    ttest,
    Man_u_value,
    Man_p_value"""
    in_list1_skew = ('normal skewtest in_list1 = %6.3f pvalue = %6.4f' %
                      stats.skewtest(in_list1))
    in_list2_skew = ('normal skewtest in_list2 = %6.3f pvalue = %6.4f' %
                      stats.skewtest(in_list2))
    ttest = ('t-statistic = %6.3f pvalue = %6.4f' %
             stats.ttest_ind(in_list1, in_list2))
    Man_u_value, Man_p_value = mannwhitneyu(in_list1, in_list2,
                                            alternative="two-sided")
    outdata = "\t".join([in_list1_skew,
                         in_list2_skew,
                         ttest,
                         str(Man_u_value),
                         str(Man_p_value)])
    skew_t = "\t".join(["in_list1_skew: %s" % in_list1_skew,
                        "in_list2_skew: %s" % in_list2_skew,
                        "Mann_whitney U test P value: %s" % Man_p_value])
    return skew_t


def plot_seq_len_histograms(folder, in1, in2,
                            in_list1, in_list2):
    """takes in a 2 lists of number and plots a histogram.
    Plots two histograms on a graph """
    # the histogram of the data
    in1_name = os.path.split(args.in1)[-1][:8]
    in1_full = os.path.split(args.in1)[-1].split("_L")[0]

    in2_name = os.path.split(args.in2)[-1][:8]
    in2_full = os.path.split(args.in2)[-1].split("_L")[0]

    fig = plt.figure(figsize=(10, 8), dpi=1200)
    ax1 = fig.add_subplot(1, 2, 1)  # 1x2 grid, position 1
    ax2 = fig.add_subplot(1, 2, 2)  # 1x2 grid, position 2
    # graph1
    rects1 = ax1.hist(in_list1, bins=50, facecolor='green', alpha=0.6)
    ax1.set_xlabel('LOG number of sequences in duplication count')
    ax1.set_ylabel('Count: number of duplication catorgory observed')
    ax1.grid(True)
    ax1.set_title("Histogram of %s duplication" % in1_full)
    # graph 2
    rects2 = ax2.hist(in_list2, bins=50, facecolor='green', alpha=0.6)
    ax2.set_xlabel('LOG number of sequences in duplication count')
    ax2.set_ylabel('Count: number of duplication catorgory observed')
    ax2.grid(True)
    ax2.set_title("Histogram of %s duplication" % in2_full)
    fig.tight_layout()
    fig
    name = "%s_vs_%s_histo_of_duplication.png" %(in1_name, in2_name)
    outpng = os.path.join(folder, name)
    pylab.savefig(outpng)
    pylab.close()


args, FILE_DIRECTORY = get_args()
# Run as script
if __name__ == '__main__':
    in1_data = []
    in1_data_log = []
    in2_data = []
    in2_data_log = []
    with open(args.in1, 'r') as fh:
        for line in fh:
            in1_data.append(int(line.rstrip()))
            in1_data_log.append(log(int(line.rstrip()),10))
    with open(args.in2, 'r') as fh:
        for line in fh:
            in2_data.append(int(line.rstrip()))
            in2_data_log.append(log(int(line.rstrip()),10))

    skew_t = stats_on_list_of_sizes(in1_data, in2_data)
    outfmt = "%s versus %s : \t%s" %(os.path.split(args.in1)[-1],
                                      os.path.split(args.in2)[-1],
                                      skew_t)
    print(outfmt)
    #print(skew_t)
    cwd = os.getcwd()
    plot_seq_len_histograms(cwd, args.in1, args.in2,
                            in1_data_log, in2_data_log)






